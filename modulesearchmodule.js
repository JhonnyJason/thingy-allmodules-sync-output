// Generated by CoffeeScript 2.6.1
//#############################################################################
//region debug
var isCoffeeModule, isModule, isStyleModule, log, olog;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("modulesearchmodule"));

import fs from "fs-extra";

import * as pathHandler from "./pathhandlermodule.js";

import * as utl from "./utilmodule.js";

//endregion

//#############################################################################
//region internal functions
isModule = function(dirname) {
  if (!dirname) {
    return false;
  }
  if (dirname.endsWith("module")) {
    return true;
  }
  return false;
};

isCoffeeModule = async function(dir) {
  var exists, path;
  // log "isCoffeeModule"
  path = pathHandler.getCoffeePath(dir);
  exists = (await utl.pathExists(path));
  // log "path: " + path
  // log "does exist? " + exists
  if (exists) {
    return dir;
  } else {
    return false;
  }
};

isStyleModule = async function(dir) {
  var exists, path;
  // log "isStyleModule"
  path = pathHandler.getStylePath(dir);
  exists = (await utl.pathExists(path));
  // log "path: " + path
  // log "does exist? " + exists
  if (exists) {
    return dir;
  } else {
    return false;
  }
};

//endregion

//#############################################################################
//region exposed functions
export var searchModules = async function() {
  var coffeeCheckPromises, coffeeResults, dir, dirs, modules, result, styleCheckPromises, styleResults;
  log("searchModules");
  dirs = (await fs.readdir(pathHandler.getSourcePath()));
  // log "read dirs:\n" + JSON.stringify(dirs, null, 4)
  coffeeCheckPromises = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = dirs.length; i < len; i++) {
      dir = dirs[i];
      if (isModule(dir)) {
        results.push(isCoffeeModule(dir));
      }
    }
    return results;
  })();
  styleCheckPromises = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = dirs.length; i < len; i++) {
      dir = dirs[i];
      if (isModule(dir)) {
        results.push(isStyleModule(dir));
      }
    }
    return results;
  })();
  coffeeResults = (await Promise.all(coffeeCheckPromises));
  styleResults = (await Promise.all(styleCheckPromises));
  modules = {};
  modules.coffee = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = coffeeResults.length; i < len; i++) {
      result = coffeeResults[i];
      if (result) {
        results.push(result);
      }
    }
    return results;
  })();
  modules.style = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = styleResults.length; i < len; i++) {
      result = styleResults[i];
      if (result) {
        results.push(result);
      }
    }
    return results;
  })();
  return modules;
};

//endregion

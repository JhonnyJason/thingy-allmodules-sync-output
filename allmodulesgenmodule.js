// Generated by CoffeeScript 2.4.1
(function() {
  var allmodulesgenmodule, checkForImportStyle, fs, log, mustache, pathHandler, pathModule, writeImportCoffee, writeRequireCoffee, writeStyl;

  allmodulesgenmodule = {
    name: "allmodulesgenmodule"
  };

  //region node_modules
  fs = require("fs-extra");

  mustache = require("mustache");

  pathModule = require("path");

  //endregion

  //log Switch
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["allmodulesgenmodule"] != null) {
      console.log("[allmodulesgenmodule]: " + arg);
    }
  };

  //region internal variables
  pathHandler = null;

  //endregion

  //#initialization function  -> is automatically being called!  ONLY RELY ON DOM AND VARIABLES!! NO PLUGINS NO OHTER INITIALIZATIONS!!
  allmodulesgenmodule.initialize = function() {
    log("allmodulesgenmodule.initialize");
    pathHandler = allModules.pathhandlermodule;
  };

  //region internal functions
  writeRequireCoffee = async function(coffeeModules) {
    var fileContent, fileName, filePath, template, templatePath;
    log("writeCoffeeRequireStyle");
    templatePath = pathModule.resolve(__dirname, "file-templates/require-template.coffee");
    fileName = "modules.coffee";
    filePath = pathModule.resolve(pathHandler.allmodulesPath, fileName);
    // log "filePath: " + filePath
    template = (await fs.readFile(templatePath, "utf-8"));
    fileContent = mustache.render(template, {
      modules: coffeeModules
    });
    
    // log "\n - - - \nfileContent:\n" + fileContent
    return (await fs.writeFile(filePath, fileContent));
  };

  writeImportCoffee = async function(coffeeModules) {
    var fileContent, fileName, filePath, template, templatePath;
    log("writeCoffeeImportStyle");
    templatePath = pathModule.resolve(__dirname, "file-templates/import-template.coffee");
    fileName = "modules.coffee";
    filePath = pathModule.resolve(pathHandler.allmodulesPath, fileName);
    // log "filePath: " + filePath
    template = (await fs.readFile(templatePath, "utf-8"));
    fileContent = mustache.render(template, {
      modules: coffeeModules
    });
    
    // log "\n - - - \nfileContent:\n" + fileContent
    return (await fs.writeFile(filePath, fileContent));
  };

  writeStyl = async function(styleModules) {
    var fileContent, fileName, filePath, template, templatePath;
    log("writeStyl");
    templatePath = pathModule.resolve(__dirname, "file-templates/allstyles-template.styl");
    fileName = "modules.styl";
    filePath = pathModule.resolve(pathHandler.allmodulesPath, fileName);
    // log "filePath: " + filePath
    template = (await fs.readFile(templatePath, "utf-8"));
    fileContent = mustache.render(template, {
      modules: styleModules
    });
    
    // log "\n - - - \nfileContent:\n" + fileContent
    return (await fs.writeFile(filePath, fileContent));
  };

  checkForImportStyle = async function() {
    var packageJson, packageJsonPath, packageObject, type;
    log("checkForImportStyle");
    packageJsonPath = pathHandler.getPackageJsonPath();
    packageJson = (await fs.readFile(packageJsonPath, "utf-8"));
    packageObject = JSON.parse(packageJson);
    type = packageObject.type;
    log(type);
    switch (type) {
      case "website":
        return true;
      case "app":
        return true;
      default:
        return false;
    }
  };

  //endregion

  //region exposed functions
  allmodulesgenmodule.generate = async function(modules) {
    var hasImportStyle, writeCoffee;
    log("allmodulesgenmodule.generate");
    hasImportStyle = (await checkForImportStyle());
    if (hasImportStyle) {
      writeCoffee = writeImportCoffee;
    } else {
      writeCoffee = writeRequireCoffee;
    }
    if (modules.coffee && modules.coffee.length > 0) {
      await writeCoffee(modules.coffee);
    }
    if (modules.style && modules.style.length > 0) {
      return (await writeStyl(modules.style));
    }
  };

  
  //endregion
  module.exports = allmodulesgenmodule;

}).call(this);

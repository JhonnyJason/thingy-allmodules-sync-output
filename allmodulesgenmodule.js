// Generated by CoffeeScript 2.6.1
(function() {
  var allmodulesgenmodule, cfg, fs, log, mustache, pathHandler, pathModule, writeCoffee, writeImportCoffee, writeRequireCoffee, writeStyl;

  allmodulesgenmodule = {
    name: "allmodulesgenmodule"
  };

  //region modulesFromTheEnvironment
  //region node_modules
  fs = require("fs-extra");

  mustache = require("mustache");

  pathModule = require("path");

  //endregion

  //region localModules
  pathHandler = null;

  cfg = null;

  //endregion
  //endregion

  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["allmodulesgenmodule"] != null) {
      console.log("[allmodulesgenmodule]: " + arg);
    }
  };

  //endregion
  //###############################################################################
  allmodulesgenmodule.initialize = function() {
    log("allmodulesgenmodule.initialize");
    pathHandler = allModules.pathhandlermodule;
    cfg = allModules.configmodule;
  };

  //region internalFunctions
  writeRequireCoffee = async function(coffeeModules) {
    var fileContent, fileName, filePath, template, templatePath;
    log("writeCoffeeRequireStyle");
    templatePath = pathModule.resolve(__dirname, "file-templates/require-template.coffee");
    fileName = cfg.outputCoffeeName;
    filePath = pathModule.resolve(pathHandler.allmodulesPath, fileName);
    // log "filePath: " + filePath
    template = (await fs.readFile(templatePath, "utf-8"));
    fileContent = mustache.render(template, {
      modules: coffeeModules
    });
    
    // log "\n - - - \nfileContent:\n" + fileContent
    await fs.writeFile(filePath, fileContent);
  };

  writeImportCoffee = async function(coffeeModules) {
    var fileContent, fileName, filePath, template, templatePath;
    log("writeCoffeeImportStyle");
    templatePath = pathModule.resolve(__dirname, "file-templates/import-template.coffee");
    fileName = cfg.outputCoffeeName;
    filePath = pathModule.resolve(pathHandler.allmodulesPath, fileName);
    // log "filePath: " + filePath
    template = (await fs.readFile(templatePath, "utf-8"));
    fileContent = mustache.render(template, {
      modules: coffeeModules
    });
    
    // log "\n - - - \nfileContent:\n" + fileContent
    await fs.writeFile(filePath, fileContent);
  };

  writeStyl = async function(styleModules) {
    var fileContent, fileName, filePath, template, templatePath;
    log("writeStyl");
    templatePath = pathModule.resolve(__dirname, "file-templates/allstyles-template.styl");
    fileName = cfg.outputStylusName;
    filePath = pathModule.resolve(pathHandler.allmodulesPath, fileName);
    // log "filePath: " + filePath
    template = (await fs.readFile(templatePath, "utf-8"));
    fileContent = mustache.render(template, {
      modules: styleModules
    });
    
    // log "\n - - - \nfileContent:\n" + fileContent
    await fs.writeFile(filePath, fileContent);
  };

  writeCoffee = async function(coffeeModules) {
    var fileContent, fileName, filePath, template, templatePath;
    log("writeCoffee");
    templatePath = pathModule.resolve(__dirname, "file-templates/allmodules.mustache");
    fileName = cfg.outputCoffeeName;
    filePath = pathModule.resolve(pathHandler.allmodulesPath, fileName);
    // log "filePath: " + filePath
    template = (await fs.readFile(templatePath, "utf-8"));
    fileContent = mustache.render(template, {
      modules: coffeeModules
    });
    
    // log "\n - - - \nfileContent:\n" + fileContent
    await fs.writeFile(filePath, fileContent);
  };

  //endregion

  //region exposedFunctions
  allmodulesgenmodule.generate = async function(modules, style) {
    var promises;
    log("allmodulesgenmodule.generate");
    // if style == "import" then writeCoffee = writeImportCoffee
    // else writeCoffee = writeRequireCoffee
    promises = [];
    if (modules.coffee && modules.coffee.length > 0) {
      promises.push(writeCoffee(modules.coffee));
    }
    if (modules.style && modules.style.length > 0) {
      promises.push(writeStyl(modules.style));
    }
    await Promise.all(promises);
  };

  
  //endregion
  module.exports = allmodulesgenmodule;

}).call(this);

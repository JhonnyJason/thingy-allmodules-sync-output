// Generated by CoffeeScript 2.6.1
//#############################################################################
//region debug
var cfg, log, olog, pathHandler, writeCoffee, writeStyl;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("allmodulesgenmodule"));

import fs from "fs-extra";

import * as mustache from "mustache";

import * as pathModule from "path";

//endregion

//###############################################################################
//region localModules
pathHandler = null;

cfg = null;

//endregion

//endregion

//###############################################################################
export var initialize = function() {
  log("initialize");
  pathHandler = allModules.pathhandlermodule;
  cfg = allModules.configmodule;
};

//###############################################################################
//region internalFunctions
writeStyl = async function(styleModules) {
  var fileContent, fileName, filePath, template, templatePath;
  log("writeStyl");
  templatePath = pathModule.resolve(__dirname, "file-templates/allstyles.mustache");
  fileName = cfg.outputStylusName;
  filePath = pathModule.resolve(pathHandler.allmodulesPath, fileName);
  // log "filePath: " + filePath
  template = (await fs.readFile(templatePath, "utf-8"));
  fileContent = mustache.render(template, {
    modules: styleModules
  });
  
  // log "\n - - - \nfileContent:\n" + fileContent
  await fs.writeFile(filePath, fileContent);
};

writeCoffee = async function(coffeeModules) {
  var fileContent, fileName, filePath, template, templatePath;
  log("writeCoffee");
  templatePath = pathModule.resolve(__dirname, "file-templates/allmodules.mustache");
  fileName = cfg.outputCoffeeName;
  filePath = pathModule.resolve(pathHandler.allmodulesPath, fileName);
  // log "filePath: " + filePath
  template = (await fs.readFile(templatePath, "utf-8"));
  fileContent = mustache.render(template, {
    modules: coffeeModules
  });
  
  // log "\n - - - \nfileContent:\n" + fileContent
  await fs.writeFile(filePath, fileContent);
};

//endregion

//###############################################################################
//region exposedFunctions
export var generate = async function(modules) {
  var promises;
  log("generate");
  promises = [];
  if (modules.coffee && modules.coffee.length > 0) {
    promises.push(writeCoffee(modules.coffee));
  }
  if (modules.style && modules.style.length > 0) {
    promises.push(writeStyl(modules.style));
  }
  await Promise.all(promises);
};


//endregion

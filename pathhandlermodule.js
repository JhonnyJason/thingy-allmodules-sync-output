// Generated by CoffeeScript 2.6.1
(function() {
  var CLI, Spinner, c, checkProvidedPath, findAllmodulesPath, findSourcePath, fs, log, pathModule, pathhandlermodule, utl;

  pathhandlermodule = {
    name: "pathhandlermodule"
  };

  //region node_modules
  c = require('chalk');

  CLI = require('clui');

  Spinner = CLI.Spinner;

  fs = require("fs-extra");

  pathModule = require("path");

  //endregion

  //log Switch
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["pathhandlermodule"] != null) {
      console.log("[pathhandlermodule]: " + arg);
    }
  };

  //region internal variables
  utl = null;

  //endregion

  //region exposed variables
  pathhandlermodule.sourcePath = "";

  pathhandlermodule.allmodulesPath = "";

  pathhandlermodule.thingyPath = "";

  //endregion

  //#initialization function  -> is automatically being called!  ONLY RELY ON DOM AND VARIABLES!! NO PLUGINS NO OHTER INITIALIZATIONS!!
  pathhandlermodule.initialize = function() {
    log("pathhandlermodule.initialize");
    utl = allModules.utilmodule;
  };

  //region internal functions
  findSourcePath = async function() {
    var exists, sourcePath;
    log("findSourcePath");
    sourcePath = pathModule.resolve(pathhandlermodule.thingyPath, "sources/source");
    exists = (await utl.pathIsDir(sourcePath));
    if (!exists) {
      throw new Error("sourcePath: " + sourcePath + " did not exist! The provided path might not be the thingy root.");
    }
    return pathhandlermodule.sourcePath = sourcePath;
  };

  findAllmodulesPath = async function() {
    var allmodulesPath, exists;
    log("findAllmodulesPath");
    allmodulesPath = pathModule.resolve(pathhandlermodule.sourcePath, "allmodules");
    exists = (await utl.pathIsDir(allmodulesPath));
    if (!exists) {
      await fs.mkdirs(allmodulesPath);
    }
    return pathhandlermodule.allmodulesPath = allmodulesPath;
  };

  checkProvidedPath = async function(providedPath) {
    var exists;
    log("checkProvidedPath");
    if (providedPath) {
      if (!pathModule.isAbsolute(providedPath)) {
        providedPath = pathModule.resolve(process.cwd(), providedPath);
      }
    } else {
      providedPath = process.cwd();
    }
    exists = (await utl.pathIsDir(providedPath));
    if (!exists) {
      throw new Error("Provided path:'" + providedPath + "' does not exist!");
    }
    return pathhandlermodule.thingyPath = providedPath;
  };

  //endregion

  //region exposed functions
  pathhandlermodule.checkPaths = async function(providedPath) {
    log("pathhandlermodule.checkPaths");
    log("checking for providedPath: " + providedPath);
    await checkProvidedPath(providedPath);
    log("resulting thingy path is: " + pathhandlermodule.thingyPath);
    await findSourcePath();
    return (await findAllmodulesPath());
  };

  pathhandlermodule.getCoffeePath = function(module) {
    var pathPostfix;
    log("pathhandlermodule.getCoffeeModulePath");
    pathPostfix = "" + module + "/" + module + ".coffee";
    return pathModule.resolve(pathhandlermodule.sourcePath, pathPostfix);
  };

  pathhandlermodule.getStylePath = function(module) {
    var pathPostfix;
    log("pathhandlermodule.getStylePath");
    pathPostfix = "" + module + "/styles.styl";
    return pathModule.resolve(pathhandlermodule.sourcePath, pathPostfix);
  };

  pathhandlermodule.getPackageJsonPath = function() {
    log("pathhandlermodule.getPackageJsonPath");
    return pathModule.resolve(pathhandlermodule.thingyPath, "package.json");
  };

  pathhandlermodule.getAllmodulesPath = function() {
    return pathhandlermodule.allmodulesPath;
  };

  pathhandlermodule.getSourcePath = function() {
    return pathhandlermodule.sourcePath;
  };

  //endregion
  module.exports = pathhandlermodule;

}).call(this);

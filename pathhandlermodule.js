// Generated by CoffeeScript 2.6.1
//#############################################################################
//region debug
var checkProvidedPath, findAllmodulesPath, findSourcePath, log, o, olog;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("pathhandlermodule"));

import fs from "fs-extra";

import * as c from 'chalk';

import * as pathModule from "path";

import * as utl from "./utilmodule.js";

//endregion

//#############################################################################
//region exposed variables
o = {
  sourcePath: "",
  allmodulesPath: "",
  thingyPath: ""
};

export var sourcePath = o.sourcePath;

export var allmodulesPath = o.allmodulesPath;

export var thingyPath = o.thingyPath;

//endregion

//#############################################################################
//region internal functions
findSourcePath = async function() {
  var exists;
  log("findSourcePath");
  sourcePath = pathModule.resolve(o.thingyPath, "sources/source");
  exists = (await utl.pathIsDir(sourcePath));
  if (!exists) {
    throw new Error("sourcePath: " + sourcePath + " did not exist! The provided path might not be the thingy root.");
  }
  return o.sourcePath = sourcePath;
};

findAllmodulesPath = async function() {
  var exists;
  log("findAllmodulesPath");
  allmodulesPath = pathModule.resolve(o.sourcePath, "allmodules");
  exists = (await utl.pathIsDir(allmodulesPath));
  if (!exists) {
    await fs.mkdirs(allmodulesPath);
  }
  return o.allmodulesPath = allmodulesPath;
};

checkProvidedPath = async function(providedPath) {
  var exists;
  log("checkProvidedPath");
  if (providedPath) {
    if (!pathModule.isAbsolute(providedPath)) {
      providedPath = pathModule.resolve(process.cwd(), providedPath);
    }
  } else {
    providedPath = process.cwd();
  }
  exists = (await utl.pathIsDir(providedPath));
  if (!exists) {
    throw new Error("Provided path:'" + providedPath + "' does not exist!");
  }
  return o.thingyPath = providedPath;
};

//endregion

//#############################################################################
//region exposed functions
export var checkPaths = async function(providedPath) {
  log("checkPaths");
  log("checking for providedPath: " + providedPath);
  await checkProvidedPath(providedPath);
  log("resulting thingy path is: " + o.thingyPath);
  await findSourcePath();
  return (await findAllmodulesPath());
};

export var getCoffeePath = function(module) {
  var pathPostfix;
  log("getCoffeeModulePath");
  pathPostfix = "" + module + "/" + module + ".coffee";
  return pathModule.resolve(o.sourcePath, pathPostfix);
};

export var getStylePath = function(module) {
  var pathPostfix;
  log("getStylePath");
  pathPostfix = "" + module + "/styles.styl";
  return pathModule.resolve(o.sourcePath, pathPostfix);
};

export var getPackageJsonPath = function() {
  log("getPackageJsonPath");
  return pathModule.resolve(o.thingyPath, "package.json");
};

export var getAllmodulesPath = function() {
  return o.allmodulesPath;
};

export var getSourcePath = function() {
  return o.sourcePath;
};

//endregion
